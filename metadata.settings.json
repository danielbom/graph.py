{
    "help": {
        "name": "help or ?",
        "help": "Show all commands.",
        "fnct": "self.print_commands()",
        "match": "help|\\?"
    },
    "exit": {
        "name": "exit",
        "help": "Close the program.",
        "fnct": "self.exit()",
        "match": "exit"
    },
    "print": {
        "name": "print",
        "help": "Print the graph.",
        "fnct": "self.print_graph()",
        "match": "print|p"
    },
    "random": {
        "name": "random [weight|density] [%d]",
        "help": "Create a new graph of a given length.",
        "fnct": "self.random_graph()",
        "match": "random[ ]*(?P<type>weight|density)?[ ]*(?P<num>\\d+)?"
    },
    "file": {
        "name": "file [%s]",
        "help": "Load a graph from a file",
        "fnct": "self.load_file_graph()",
        "match": "file[ ]*(?P<filename>.*)?"
    },
    "clear": {
        "name": "clear",
        "help": "Remove all elements of a graph",
        "fnct": "self.clear_graph()",
        "match": "clear"
    },
    "bfs": {
        "name": "bfs [%s]",
        "help": "Run a breadth first search in the current graph. \nCase a number for passed, then it's the first value.",
        "fnct": "self.bfs_graph()",
        "match": "bfs[ ]*(?P<first>[\\d|\\s])?"
    },
    "dijkstra": {
        "name": "dijkstra [%s]",
        "help": "Run the Dijkstra's algorithm for minimum distances.",
        "fnct": "self.dijkstra_graph()",
        "match": "dijkstra[ ]*(?P<first>[\\d|\\s])?"
    },
    "kruskal": {
        "name": "kruskal",
        "help": "Run the Kruskal's algorithm for...",
        "fnct": "self.kruskal_graph()",
        "match": "kruskal"
    },
    "bellmanford": {
        "name": "bellmanford",
        "help": "Run the Bellman Ford's algorithm for...",
        "fnct": "self.bellman_ford_graph()",
        "match": "bellmanford[ ]*(?P<first>[\\d|\\s])?"
    },
    "example": {
        "name": "example [%s]",
        "help": "Show examples from number or name.\n\tCase nothing for passed, show names and number of all examples.",
        "fnct": "self.examples()",
        "match": "example[ ]*(?P<algorithm>.)?",
        "algorithm": {
            "kruskal": "example_kruskal()",
            "1": "example_kruskal()",
            "floyd warshall": "exemple_floyd_warshall()",
            "2": "exemple_floyd_warshall()",
            "topological sort": "exemple_topological_sort()",
            "3": "exemple_topological_sort()",
            "dikstra bellmanford": "exemple_dijkstra_and_bellman_ford()",
            "4": "exemple_dijkstra_and_bellman_ford()"
        }
    }
}